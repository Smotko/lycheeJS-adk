
# Those definitions should be consistent with the main Makefile
ANDROID_ARCHES = android_ia32 android_arm
MODES = release debug

# Generates all combinations of ANDROID ARCHES and MODES,
# e.g. "android_ia32.release" or "android_arm.release"
ANDROID_BUILDS = $(foreach mode,$(MODES), \
                   $(addsuffix .$(mode),$(ANDROID_ARCHES)))

HOST_OS = $(shell uname -s | sed -e 's/Linux/linux/;s/Darwin/mac/')
ifeq ($(HOST_OS), linux)
  TOOLCHAIN_DIR = linux-x86
else
  ifeq ($(HOST_OS), mac)
    TOOLCHAIN_DIR = darwin-x86
  else
    $(error Host platform "${HOST_OS}" is not supported)
  endif
endif


CFLAGS = -Wall -D__V8GL__ -D__ANDROID__

STATIC_INCLUDES = -I../external/libpng/include \
	-I../external/v8/include

STATIC_LIBRARIES = lib/$(ARCH)/libpng.a \
	lib/$(ARCH)/libv8_base.a \
	lib/$(ARCH)/libv8_nosnapshot.a

SHARED_LIBRARIES = -lpthread -lz -lm -lGLESv2


ifeq ($(ARCH), android_arm)
  TOOLCHAIN_ARCH = arm-linux-androideabi-4.4.3
  STATIC_INCLUDES += -I$(ANDROID_NDK_ROOT)/platforms/android-14/arch-arm/usr/include
  STATIC_INCLUDES += -I$(ANDROID_NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/include
  STATIC_INCLUDES += -I$(ANDROID_NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi-v7a/include
  STATIC_LIBRARIES += $(ANDROID_NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi-v7a/libgnustl_static.a
  CFLAGS += -march=armv7-a -mtune=cortex-a8 -mfpu=vfp3
  export LD_LIBRARY_PATH = $(ANDROID_NDK_ROOT)/platforms/android-14/arch-arm/usr/lib
else
  ifeq ($(ARCH), android_ia32)
    TOOLCHAIN_ARCH = x86-4.4.3
    STATIC_INCLUDES += -I$(ANDROID_NDK_ROOT)/platforms/android-14/arch-x86/usr/include
    STATIC_INCLUDES += -I$(ANDROID_NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/include
    STATIC_INCLUDES += -I$(ANDROID_NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/x86/include
    STATIC_LIBRARIES += $(ANDROID_NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/x86/libgnustl_static.a
    export LD_LIBRARY_PATH = $(ANDROID_NDK_ROOT)/platforms/android-14/arch-x86/usr/lib
  else
    $(error Target architecture "${ARCH}" is not supported)
  endif
endif




TOOLCHAIN_PATH = ${ANDROID_NDK_ROOT}/toolchains/${TOOLCHAIN_ARCH}/prebuilt
ANDROID_TOOLCHAIN ?= ${TOOLCHAIN_PATH}/${TOOLCHAIN_DIR}
ifeq ($(wildcard $(ANDROID_TOOLCHAIN)),)
  $(error Cannot find Android toolchain in "${ANDROID_TOOLCHAIN}")
endif


AR=$(ANDROID_TOOLCHAIN)/bin/*-ar
RANLIB=$(ANDROID_TOOLCHAIN)/bin/*-ranlib
CC=$(ANDROID_TOOLCHAIN)/bin/*-g++


HEADERS = src/v8gl.h \
	src/binding/gles.h \
	src/lib/fs.h \
	src/lib/os.h \
	src/api/arraybuffer.h \
	src/api/navigator.h \
	src/api/script.h \
	src/api/text.h \
	src/api/texture.h

OBJECTS = $(OUTDIR)/v8gl.o \
	$(OUTDIR)/binding_gles.o \
	$(OUTDIR)/lib_fs.o \
	$(OUTDIR)/lib_os.o \
	$(OUTDIR)/api_arraybuffer.o \
	$(OUTDIR)/api_navigator.o \
	$(OUTDIR)/api_script.o \
	$(OUTDIR)/api_text.o \
	$(OUTDIR)/api_texture.o


CFLAGS += $(STATIC_INCLUDES)
LDFLAGS = $(SHARED_LIBRARIES)

# TODO: Evaluate: This is maybe unnecessary
LDFLAGS_A = $(STATIC_LIBRARIES) $(SHARED_LIBRARIES)

debug: $(HEADERS)

release: $(HEADERS)
	rm -rf $(OUTDIR)
	mkdir $(OUTDIR)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/v8gl.o src/v8gl.cpp $(LDFLAGS)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/binding_gles.o src/binding/gles.cpp $(LDFLAGS)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/lib_fs.o src/lib/fs.cpp $(LDFLAGS)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/lib_os.o src/lib/os.cpp $(LDFLAGS)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/api_arraybuffer.o src/api/arraybuffer.cpp $(LDFLAGS)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/api_navigator.o src/api/navigator.cpp $(LDFLAGS)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/api_script.o src/api/script.cpp $(LDFLAGS)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/api_text.o src/api/text.cpp $(LDFLAGS)
	$(CC) $(CFLAGS) -c -o $(OUTDIR)/api_texture.o src/api/texture.cpp $(LDFLAGS)
	$(AR) rc $(OUTDIR)/libv8gl.a $(OBJECTS)
	$(RANLIB) $(OUTDIR)/libv8gl.a
 
